#include "BubbleSortStrategy.h"
#include "QuickSortStrategy.h"


int main()
{
  Sample<BubbleSortStrategy>* obj1 = new Sample<BubbleSortStrategy>( 3 );
  Sample<QuickSortStrategy>* obj2 = new Sample<QuickSortStrategy>( 3 );

  obj1->SetData( 0, 200 );
  obj1->SetData( 1, 100 );
  obj1->SetData( 2, 150 );
  obj2->SetData( 0, 400 );
  obj2->SetData( 1, 300 );
  obj2->SetData( 2, 200 );

  obj1->Sort();
  obj2->Sort();

  delete obj1;
  delete obj2;

  return 0;
}
#ifndef SAMPLE_H
#define SAMPLE_H

#include <cstdlib>


// ’¥µ’¥ó’¥×’¥ë’¥¯’¥é’¥¹
template <class SortStrategy>
class Sample{
public:
  // ’¥³’¥ó’¥¹’¥È’¥é’¥¯’¥¿
  Sample(unsigned int dataMax)
  {
    mDataNum = dataMax;
    mData = static_cast<int*>( std::calloc( dataMax, sizeof(int) ) );
  }
  // ’¥Ç’¥¹’¥È’¥é’¥¯’¥¿
  ~Sample()
  {
    std::free( mData );
  }


  // ’¥Ç’¡¼’¥¿’¥»’¥Ã’¥È
  void SetData(int index, int data)
  {
    mData[index] = data;
  }
  // ’¥½’¡¼’¥È
  void Sort()
  {
    mSortStrategy.Sort( mData, mDataNum );
  }


private:
  SortStrategy        mSortStrategy;      // ’¥½’¡¼’¥È’Àï’Î¬
  unsigned int        mDataNum;           // ’¥Ç’¡¼’¥¿’¸Ä’¿ô
  int*                mData;              // ’¥Ç’¡¼’¥¿’ÇÛ’Îó
};

#endif
